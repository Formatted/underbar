var _ = {};

_.identity = function(val) {

}

_.first = function(array, n) {
    
}

_.last = function(array, n) {

}

_.each = function(collection, iterator) {
  // TIP: Call iterator(value, key, collection) for each element of collection
}

_.indexOf = function(array, target) {

}

_.filter = function(collection, test) {

}

_.reject = function(collection, test) {
    // TIP: see if you can re-use _.filter() here as a DEPENDENCY, rather than
    // simply copying the filter code and modifying it
}

_.uniq = function(array) {

}

_.map = function(collection, iterator) {
    // map() is a useful primitive iteration function that works a lot
    // like each(), but in addition to running the operation on all
    // the members, it also maintains and returns an array of resultant values.
}

_.pluck = function(collection, key) {

}

_.reduce = function(collection, iterator, accumulator) {

}

_.contains = function(collection, target) {

}

_.every = function(collection, iterator) {

}

_.some = function(collection, iterator) {

}

_.extend = function(obj) {

}
